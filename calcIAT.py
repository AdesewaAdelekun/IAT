'''

Calculate IAT score from data generated by Robin's PsychoPy script

TQS Feb 2014

Based on

Greenwald, A. G., Nosek, B. A., & Banaji, M. R. (2003). Understanding and using the implicit association test: I. An improved scoring algorithm. Journal of personality and social psychology, 85(2), 1972-216.

'''

## -----------IMPORT LIBRARIES
import pandas as pd #for dealing with csv import
import os # for joining paths and filenames sensibly
import numpy as np #for the population std
import glob # for finding csv data files
import platform # paths use different dividers on linux vs windows, so we need to test for this

## -----------DEFINE FUNCTIONS


def adjustedmean(RTs,corrs,penalty):
    n=len(corrs) #trials
    n_errors=n-sum(corrs) #errors
    cor_RTs=np.array(corrs)*RTs #sum of correct RTs
    cor_mean=sum(cor_RTs)/sum(corrs)
    
    #mean with errors replaced with penalty value
    return cor_mean+(n_errors*penalty)/n



def exclude_slows(RTs,corrs,slowRT_limit):
    new_rt=[] #holding variables
    new_cr=[]
    for i in range(len(RTs)): #iterate over every item
        if RTs[i] < slowRT_limit: #if it isn't too fast, include RT and corr values
            new_rt.append(RTs[i])
            new_cr.append(corrs[i])
    
    return (new_rt, new_cr)



## -----------DEFINE PARAMETERS
print "setting parameters"

penalty=0.600 #penalty - in seconds - for incorrect responses
slowRT_limit=10 #threshold at which slow RTs are discarded
fastRT_limit=0.300 #threshold which defines responses which are "too fast"
fast_prop_limit=0.1 # threshold proportion of "too fast" responses which defines exclusion of ppt

#where we expect the data files to be
search_string=os.path.join('..','IAT-1.1','data','*.csv') 
#we use os.path.join because the slashes go different ways on different operating systems
#ie path = '../IAT-1.1/data' #linux
#   path = '..\IAT-1.1\data' #windows

## -----------LOAD DATA
print "loading datafiles"

files = glob.glob(search_string) #list of data files in the named location

#now iterate through all data files and calculate the IAT
for filename in files:

    #import into python using pandas
    df = pd.read_csv(filename)
    
    ## -----------EXTRACT DATA
    print "extracting data & calculating IAT"
    
    #extract the stuff we're interested in (n.b i am indexing using the column names defined in the csv)
    #dropna() drops nans
    #tolist() converts from series to list
    block3corr=df['key_resp_9.corr'].dropna().tolist()
    block3rt=df['key_resp_9.rt'].dropna().tolist()
    
    block5corr=df['key_resp_13.corr'].dropna().tolist()
    block5rt=df['key_resp_13.rt'].dropna().tolist()
    
    #findorder TK work out how to do this, when the psychopy code is better
    order=1
    order=2
    
    
    ## -----------ANALYSE / CALCULATE
        
    #1 discard subject if too many fast responses
    if sum(np.array(block5rt + block3rt)<fastRT_limit)>len(block5rt + block3rt)*fast_prop_limit:
        print "excluding subject for " + os.path.basename(filename) + " because too many fast responses"
    else:
        #2 Eliminate scores over 10,000 ms
             
        block3rt,block3corr=exclude_slows(block3rt,block3corr,slowRT_limit)              
        block3rt,block3corr=exclude_slows(block3rt,block3corr,slowRT_limit)
        
        #3 Calculate pooled std
        #pooled_std=pooled.std(0) #n-1 std sample std
        #(Use N not N-1 because this is the whole sample). 
        #numpy.std is population std
        pooled=block5rt + block3rt #all RTs from both blocks, correct and incorrect
        pooled_std=np.std(pooled)
        
        #4 Calculated adjusted means, including the penalty
        block3adjmean=adjustedmean(block3rt,block3corr,penalty)
        block5adjmean=adjustedmean(block5rt,block5corr,penalty)
        
        #5 Calculate the IAT, changing sign according to block order
        IAT=(block3adjmean-block5adjmean)/pooled_std
        
        if order==2:
            IAT=-IAT
            
        print "IAT for " + os.path.basename(filename) + " is : "+ str(IAT)
        
